"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/mapView.tsx":
/*!************************************!*\
  !*** ./src/components/mapView.tsx ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ mapView)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! leaflet */ \"(app-pages-browser)/./node_modules/leaflet/dist/leaflet-src.js\");\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(leaflet__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var leaflet_dist_leaflet_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! leaflet/dist/leaflet.css */ \"(app-pages-browser)/./node_modules/leaflet/dist/leaflet.css\");\n/* harmony import */ var _geoData_countries_geo_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../geoData/countries.geo.json */ \"(app-pages-browser)/./src/geoData/countries.geo.json\");\n/* harmony import */ var _geoData_co2bysector_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../geoData/co2bysector.json */ \"(app-pages-browser)/./src/geoData/co2bysector.json\");\n/* harmony import */ var _styles_components_map_module_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../styles/components/map.module.scss */ \"(app-pages-browser)/./src/styles/components/map.module.scss\");\n/* harmony import */ var _styles_components_map_module_scss__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_styles_components_map_module_scss__WEBPACK_IMPORTED_MODULE_6__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\nfunction mapView(param) {\n    let { mapTypes } = param;\n    _s();\n    const valueToColor = function(value) {\n        let minValue = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, maxValue = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 5000, lowColor = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : \"#ADD8E6\", highColor = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : \"#FF0000\";\n        function hexToRgb(hex) {\n            hex = hex.replace(\"#\", \"\");\n            return {\n                r: parseInt(hex.substring(0, 2), 16),\n                g: parseInt(hex.substring(2, 4), 16),\n                b: parseInt(hex.substring(4, 6), 16)\n            };\n        }\n        // Convert RGB to hex color\n        function rgbToHex(param) {\n            let { r, g, b } = param;\n            const toHex = (value)=>value.toString(16).padStart(2, \"0\");\n            return \"#\".concat(toHex(r)).concat(toHex(g)).concat(toHex(b));\n        }\n        // Get RGB for the low and high colors\n        const lowRgb = hexToRgb(lowColor);\n        const highRgb = hexToRgb(highColor);\n        // Normalize the value to a range of 0 to 1\n        const ratio = (value - minValue) / (maxValue - minValue);\n        // Ensure ratio is clamped between 0 and 1\n        const clampedRatio = Math.max(0, Math.min(1, ratio));\n        // Interpolate each color channel\n        const interpolatedRgb = {\n            r: Math.round(lowRgb.r + (highRgb.r - lowRgb.r) * clampedRatio),\n            g: Math.round(lowRgb.g + (highRgb.g - lowRgb.g) * clampedRatio),\n            b: Math.round(lowRgb.b + (highRgb.b - lowRgb.b) * clampedRatio)\n        };\n        // Convert back to hex\n        return rgbToHex(interpolatedRgb);\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"mapView.useEffect\": ()=>{\n            console.log('mapTyasdasdapes inside', mapTypes);\n            const map = leaflet__WEBPACK_IMPORTED_MODULE_2___default().map('map', {\n                center: [\n                    0,\n                    0\n                ],\n                zoom: 2,\n                maxZoom: 19,\n                minZoom: 2,\n                maxBounds: [\n                    [\n                        -90,\n                        -180\n                    ],\n                    [\n                        90,\n                        180\n                    ]\n                ]\n            });\n            leaflet__WEBPACK_IMPORTED_MODULE_2___default().tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n                attribution: 'Â© OpenStreetMap contributors'\n            }).addTo(map);\n            const geoJsonLayer = leaflet__WEBPACK_IMPORTED_MODULE_2___default().geoJSON(_geoData_countries_geo_json__WEBPACK_IMPORTED_MODULE_4__, {\n                style: {\n                    \"mapView.useEffect.geoJsonLayer\": (feature)=>{\n                        // console.log(feature);\n                        const country = _geoData_co2bysector_json__WEBPACK_IMPORTED_MODULE_5__.find({\n                            \"mapView.useEffect.geoJsonLayer.country\": (item)=>item.Country == feature.properties.name\n                        }[\"mapView.useEffect.geoJsonLayer.country\"]);\n                        console.log('cont', country);\n                        var color = 'white';\n                        if (country) {\n                            color = valueToColor(country.TotalCO2emissionsfromfuelcombustion);\n                        } else {\n                            color = 'white';\n                        }\n                        const emissions = feature.properties.emissions || 0;\n                        return {\n                            color: 'black',\n                            weight: 1,\n                            fillColor: color,\n                            fillOpacity: 0.7\n                        };\n                    }\n                }[\"mapView.useEffect.geoJsonLayer\"],\n                onEachFeature: {\n                    \"mapView.useEffect.geoJsonLayer\": (feature, layer)=>{\n                        const country = _geoData_co2bysector_json__WEBPACK_IMPORTED_MODULE_5__.find({\n                            \"mapView.useEffect.geoJsonLayer.country\": (item)=>item.Country == feature.properties.name\n                        }[\"mapView.useEffect.geoJsonLayer.country\"]);\n                        layer.bindPopup(\"<b>\".concat(country === null || country === void 0 ? void 0 : country.Country, \"</b> million tonnes of CO2<br>Emissions: \").concat(country === null || country === void 0 ? void 0 : country.TotalCO2emissionsfromfuelcombustion, \" \\n                <br /> \\n                Commercial and public services: \").concat(country === null || country === void 0 ? void 0 : country.Sectors.Commercialandpublicservices, \" \\n                Manufacturing industries and construction: \").concat(country === null || country === void 0 ? void 0 : country.Sectors.Manufacturingindustriesandconstruction, \" \\n                Other energy industry own use: \").concat(country === null || country === void 0 ? void 0 : country.Sectors.Otherenergyindustryownuse, \" \\n                Commercial and public services: \").concat(country === null || country === void 0 ? void 0 : country.Sectors.Commercialandpublicservices, \" \\n                \"));\n                    }\n                }[\"mapView.useEffect.geoJsonLayer\"]\n            });\n            const co2Sector = mapTypes.find({\n                \"mapView.useEffect.co2Sector\": (item)=>item.name === \"co2bysector\"\n            }[\"mapView.useEffect.co2Sector\"]);\n            if (co2Sector === null || co2Sector === void 0 ? void 0 : co2Sector.active) {\n                geoJsonLayer.addTo(map);\n            }\n            return ({\n                \"mapView.useEffect\": ()=>{\n                    map.remove();\n                }\n            })[\"mapView.useEffect\"];\n        }\n    }[\"mapView.useEffect\"], [\n        mapTypes\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: (_styles_components_map_module_scss__WEBPACK_IMPORTED_MODULE_6___default().maps_container),\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            id: \"map\",\n            style: {\n                width: '100%',\n                height: '100%'\n            }\n        }, void 0, false, {\n            fileName: \"/Users/marleynicolson/Desktop/internal projects/ecoMap/EcoMap/src/components/mapView.tsx\",\n            lineNumber: 112,\n            columnNumber: 13\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/marleynicolson/Desktop/internal projects/ecoMap/EcoMap/src/components/mapView.tsx\",\n        lineNumber: 111,\n        columnNumber: 9\n    }, this);\n}\n_s(mapView, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/mapView.tsx\n"));

/***/ })

});